--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import pyvista as pv

# Create a Dash app
app = dash.Dash(__name__)

# Path to the OBJ file
obj_file_path = 'path/to/your/file.obj'

# Load the OBJ file using pyvista
mesh = pv.read(obj_file_path)

# Create a PyVista plotter
plotter = pv.Plotter()

# Add the OBJ mesh to the plotter
plotter.add_mesh(mesh, color='lightpink', show_edges=True)

# Create the layout of the Dash app
app.layout = html.Div([
    dcc.Graph(id='3d-visualization')
])

# Callback to update the 3D visualization
@app.callback(
    Output('3d-visualization', 'figure'),
    [Input('3d-visualization', 'relayoutData')]
)
def update_3d_visualization(relayoutData):
    # Convert the PyVista plotter to a Plotly figure
    figure = plotter.to_plotly()

    # Adjust layout settings as needed
    figure['layout']['scene']['camera']['eye'] = dict(x=2.5, y=2.5, z=1.5)

    return figure

if __name__ == '__main__':
    app.run_server(debug=True)

--------------------------------------------------------------------------------------------------------------------
import plotly.graph_objects as go
import pywavefront
import numpy as np

# Path to the OBJ file
obj_file_path = 'path/to/your/file.obj'

# Read the OBJ file
scene = pywavefront.Wavefront(obj_file_path)

# Extract vertices and faces from the scene
vertices = []
triangles = []

for name, mesh in scene.meshes.items():
    vertices.extend(mesh.vertices)
    triangles.extend(mesh.faces)

# Create the plotly trace for the 3D mesh
vertices = np.array(vertices)
triangles = np.array(triangles) - 1  # OBJ format uses 1-based indexing, so we subtract 1
x, y, z = vertices[:, 0], vertices[:, 1], vertices[:, 2]

trace = go.Mesh3d(
    x=x,
    y=y,
    z=z,
    i=triangles[:, 0],
    j=triangles[:, 1],
    k=triangles[:, 2],
    color='lightpink',
    showscale=False
)

# Create the layout and add the trace to the scene
layout = go.Layout(
    scene=dict(
        aspectmode='data'
    )
)
fig = go.Figure(data=[trace], layout=layout)

# Show the figure
fig.show()

--------------------------------------------------------------------------------------------------------------------
import plotly.graph_objects as go
import pywavefront

# Path to the OBJ file
obj_file_path = 'path/to/your/file.obj'

# Read the OBJ file
scene = pywavefront.Wavefront(obj_file_path)

# Extract vertices and faces from the scene
vertices = []
triangles = []

for name, mesh in scene.meshes.items():
    for vertex in mesh.vertices:
        vertices.append((vertex[0], vertex[1], vertex[2]))

    for face in mesh.faces:
        if len(face) == 3:
            triangles.append((face[0][0], face[1][0], face[2][0]))

# Create the plotly trace for the 3D mesh
trace = go.Mesh3d(
    x=[v[0] for v in vertices],
    y=[v[1] for v in vertices],
    z=[v[2] for v in vertices],
    i=[t[0] for t in triangles],
    j=[t[1] for t in triangles],
    k=[t[2] for t in triangles],
    color='lightpink',
    showscale=False
)

# Create the layout and add the trace to the scene
layout = go.Layout(
    scene=dict(
        aspectmode='data'
    )
)
fig = go.Figure(data=[trace], layout=layout)

# Show the figure
fig.show()

--------------------------------------------------------------------------------------------------------------------
import dash
import dash_html_components as html
import dash_core_components as dcc
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output, State

# Initialize the Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Dummy user credentials for demonstration (replace with your authentication method)
VALID_USERNAME_PASSWORD_PAIRS = {
    'username': 'password'
}

# Define the layout of the login page
login_layout = html.Div([
    html.H1("Login Page", style={'textAlign': 'center'}),
    dcc.Input(id='username-input', type='text', placeholder='Username', style={'margin': '10px'}),
    dcc.Input(id='password-input', type='password', placeholder='Password', style={'margin': '10px'}),
    html.Button('Login', id='login-button', n_clicks=0, style={'margin': '10px'}),
    html.Div(id='login-error', style={'color': 'red', 'textAlign': 'center'})
])

# Define the layout of the protected page
protected_layout = html.Div([
    html.H1("Welcome to the Protected Page", style={'textAlign': 'center'}),
    dcc.Location(id='url', refresh=False),
    dbc.Button("Log Off", id='log-off-button', color='danger', n_clicks=0, style={'margin': 'auto', 'display': 'block'}),
    html.Div(id='log-off-message', style={'textAlign': 'center', 'margin-top': '10px'}),
])

# Define app layout using the login page initially
app.layout = login_layout

# Define a variable to track the user's authentication status (replace with your session management logic)
authenticated = False

# Callback to handle user login and log-off, and redirecting to the login page
@app.callback([Output('url', 'pathname'), Output('login-error', 'children')],
              [Input('login-button', 'n_clicks'),
               Input('log-off-button', 'n_clicks')],
              [State('username-input', 'value'),
               State('password-input', 'value'),
               State('url', 'pathname')])
def login_and_log_off(login_n_clicks, log_off_n_clicks, username, password, current_path):
    global authenticated

    if login_n_clicks > 0:
        if username in VALID_USERNAME_PASSWORD_PAIRS and VALID_USERNAME_PASSWORD_PAIRS[username] == password:
            # Here, you would typically set a session token or flag to indicate the user is logged in.
            authenticated = True
            return "/protected", ""
        else:
            authenticated = False
            return current_path, "Invalid username or password"
    elif log_off_n_clicks > 0:
        # Here, you would typically clear the session token or flag to indicate the user is logged out.
        authenticated = False
        return "/", ""
    elif current_path == "/protected" and not authenticated:
        return "/", "You need to log in first"

    return current_path, ""

# Callback to display a message when the user is redirected to the log-off page
@app.callback(Output('log-off-message', 'children'),
              [Input('url', 'pathname')])
def display_log_off_message(pathname):
    if pathname == "/protected":
        return html.H3("You have been successfully logged off!", style={'color': 'red'})
    return ""

if __name__ == '__main__':
    app.run_server(debug=True)

--------------------------------------------------------------------------------------------------------------------
import dash
import dash_html_components as html
import dash_core_components as dcc
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output, State

# Initialize the Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Dummy user credentials for demonstration (replace with your authentication method)
VALID_USERNAME_PASSWORD_PAIRS = {
    'username': 'password'
}

# Define the layout of the login page
login_layout = html.Div([
    html.H1("Login Page", style={'textAlign': 'center'}),
    dcc.Input(id='username-input', type='text', placeholder='Username', style={'margin': '10px'}),
    dcc.Input(id='password-input', type='password', placeholder='Password', style={'margin': '10px'}),
    html.Button('Login', id='login-button', n_clicks=0, style={'margin': '10px'}),
    html.Div(id='login-error', style={'color': 'red', 'textAlign': 'center'})
])

# Define the layout of the protected page
protected_layout = html.Div([
    html.H1("Welcome to the Protected Page", style={'textAlign': 'center'}),
    dcc.Location(id='url', refresh=False),
    dbc.Button("Log Off", id='log-off-button', color='danger', n_clicks=0, style={'margin': 'auto', 'display': 'block'}),
    html.Div(id='log-off-message', style={'textAlign': 'center', 'margin-top': '10px'}),
])

# Define app layout using the login page initially
app.layout = login_layout

# Define a variable to track the user's authentication status (replace with your session management logic)
authenticated = False

# Callback to handle user login and log-off
@app.callback([Output('url', 'pathname'), Output('login-error', 'children')],
              [Input('login-button', 'n_clicks'),
               Input('log-off-button', 'n_clicks')],
              [State('username-input', 'value'),
               State('password-input', 'value'),
               State('url', 'pathname')])
def login_and_log_off(login_n_clicks, log_off_n_clicks, username, password, current_path):
    global authenticated
    if login_n_clicks > 0:
        if username in VALID_USERNAME_PASSWORD_PAIRS and VALID_USERNAME_PASSWORD_PAIRS[username] == password:
            # Here, you would typically set a session token or flag to indicate the user is logged in.
            authenticated = True
            return "/protected", ""
        else:
            authenticated = False
            return current_path, "Invalid username or password"
    elif log_off_n_clicks > 0:
        # Here, you would typically clear the session token or flag to indicate the user is logged out.
        authenticated = False
        return "/", ""
    return current_path, ""

# Callback to redirect to the login page if accessing the protected page without logging in
@app.callback(Output('url', 'pathname'),
              [Input('url', 'pathname')])
def redirect_to_login(pathname):
    # Here, check the user's authentication status based on the session token or flag.
    # If not authenticated and accessing a protected page, redirect to the login page.
    global authenticated
    if pathname == "/protected" and not authenticated:
        return "/"
    return pathname

# Callback to display a message when the user is redirected to the log-off page
@app.callback(Output('log-off-message', 'children'),
              [Input('url', 'pathname')])
def display_log_off_message(pathname):
    if pathname == "/protected":
        return html.H3("You have been successfully logged off!", style={'color': 'red'})
    return ""

if __name__ == '__main__':
    app.run_server(debug=True)

--------------------------------------------------------------------------------------------------------------------
import dash
import dash_html_components as html
import dash_core_components as dcc
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output, State

# Initialize the Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Dummy user credentials for demonstration (replace with your authentication method)
VALID_USERNAME_PASSWORD_PAIRS = {
    'username': 'password'
}

# Define the layout of the login page
login_layout = html.Div([
    html.H1("Login Page", style={'textAlign': 'center'}),
    dcc.Input(id='username-input', type='text', placeholder='Username', style={'margin': '10px'}),
    dcc.Input(id='password-input', type='password', placeholder='Password', style={'margin': '10px'}),
    html.Button('Login', id='login-button', n_clicks=0, style={'margin': '10px'}),
    html.Div(id='login-error', style={'color': 'red', 'textAlign': 'center'})
])

# Define the layout of the protected page
protected_layout = html.Div([
    dcc.Location(id='url', refresh=False),
    html.H1("Welcome to the Protected Page", style={'textAlign': 'center'}),
    dbc.Button("Log Off", id='log-off-button', color='danger', n_clicks=0, style={'margin': 'auto', 'display': 'block'}),
    html.Div(id='log-off-message', style={'textAlign': 'center', 'margin-top': '10px'}),
])

# Define app layout as the login page initially
app.layout = login_layout

# Callback to handle user login, log-off, and redirecting to the login page
@app.callback(Output('url', 'pathname'),
              [Input('login-button', 'n_clicks'),
               Input('log-off-button', 'n_clicks')],
              [State('username-input', 'value'),
               State('password-input', 'value'),
               State('url', 'pathname')])
def login_and_log_off(login_n_clicks, log_off_n_clicks, username, password, current_path):
    if login_n_clicks > 0:
        if username in VALID_USERNAME_PASSWORD_PAIRS and VALID_USERNAME_PASSWORD_PAIRS[username] == password:
            # Here, you would typically set a session token or flag to indicate the user is logged in.
            return "/protected"
        else:
            return "/"
    elif log_off_n_clicks > 0:
        # Here, you would typically clear the session token or flag to indicate the user is logged out.
        return "/"
    elif current_path == "/protected":
        # Here, check the user's authentication status based on the session token or flag.
        # If not authenticated and accessing a protected page, redirect to the login page.
        if not authenticated:
            return "/"
    return current_path

# Callback to display a message when the user is redirected to the log-off page
@app.callback(Output('log-off-message', 'children'),
              [Input('url', 'pathname')])
def display_log_off_message(pathname):
    if pathname == "/protected":
        return html.H3("You have been successfully logged off!", style={'color': 'red'})
    return ""

if __name__ == '__main__':
    app.run_server(debug=True)

--------------------------------------------------------------------------------------------------------------------
import dash
import dash_html_components as html
import dash_core_components as dcc
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output, State

# Initialize the Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Dummy user credentials for demonstration (replace with your authentication method)
VALID_USERNAME_PASSWORD_PAIRS = {
    'username': 'password'
}

# Define the layout of the login page
login_layout = html.Div([
    html.H1("Login Page", style={'textAlign': 'center'}),
    dcc.Input(id='username-input', type='text', placeholder='Username', style={'margin': '10px'}),
    dcc.Input(id='password-input', type='password', placeholder='Password', style={'margin': '10px'}),
    html.Button('Login', id='login-button', n_clicks=0, style={'margin': '10px'}),
    html.Div(id='login-error', style={'color': 'red', 'textAlign': 'center'})
])

# Define the layout of the protected page
protected_layout = html.Div([
    dcc.Location(id='url', refresh=False),
    html.H1("Welcome to the Protected Page", style={'textAlign': 'center'}),
    dbc.Button("Log Off", id='log-off-button', color='danger', n_clicks=0, style={'margin': 'auto', 'display': 'block'}),
    html.Div(id='log-off-message', style={'textAlign': 'center', 'margin-top': '10px'}),
])

# Define app layout as the login page initially
app.layout = login_layout

# Callback to handle user login
@app.callback(Output('url', 'pathname'),
              [Input('login-button', 'n_clicks')],
              [State('username-input', 'value'),
               State('password-input', 'value')])
def login(n_clicks, username, password):
    if n_clicks > 0:
        if username in VALID_USERNAME_PASSWORD_PAIRS and VALID_USERNAME_PASSWORD_PAIRS[username] == password:
            # Here, you would typically set a session token or flag to indicate the user is logged in.
            return "/protected"
        else:
            return "/"
    return "/"

# Callback to handle log-off
@app.callback(Output('url', 'pathname'),
              [Input('log-off-button', 'n_clicks')],
              [State('url', 'pathname')])
def log_off(n_clicks, current_path):
    if n_clicks > 0:
        # Here, you would typically clear the session token or flag to indicate the user is logged out.
        return "/"
    return current_path

# Callback to redirect to login page if accessing the protected page without logging in
@app.callback(Output('url', 'pathname'),
              [Input('url', 'pathname')])
def redirect_to_login(pathname):
    # Here, check the user's authentication status based on the session token or flag.
    # If not authenticated and accessing a protected page, redirect to the login page.
    if pathname == "/protected" and not authenticated:
        return "/"
    return pathname

if __name__ == '__main__':
    app.run_server(debug=True)

--------------------------------------------------------------------------------------------------------------------
import dash
import dash_vtk_widget
import pyvista as pv

# Path to the STP file
stp_file_path = 'path/to/your/file.stp'

# Load the STP file
mesh = pv.read(stp_file_path)

# Convert the PyVista mesh to VTK format
vtk_mesh = mesh.to_vtk()

# Create the Dash app
app = dash.Dash(__name__)

# Define the layout of the app
app.layout = dash_vtk_widget.View(
    [
        dash_vtk_widget.GeometryRepresentation(
            id="vtk-rep",
            children=[
                dash_vtk_widget.Mesh(
                    id="vtk-mesh",
                    representation="surface",
                    children=[dash_vtk_widget.PolyData(id="vtk-polydata", vtkPolyData=vtk_mesh)],
                ),
            ],
        ),
    ],
)

if __name__ == '__main__':
    app.run_server(debug=True)

--------------------------------------------------------------------------------------------------------------------
import dash
import dash_vtk
import pyvista as pv

# Path to the STP file
stp_file_path = 'path/to/your/file.stp'

# Load the STP file
mesh = pv.read(stp_file_path)

# Create the Dash app
app = dash.Dash(__name__)

# Define the layout of the app
app.layout = dash_vtk.View(
    children=[
        dash_vtk.Volume(
            id="vtk-volume",
            mapper=dash_vtk.PolyDataMapper(
                id="vtk-mapper",
                input_data=mesh
            ),
            color_map=dash_vtk.ColorMaps.Viridis,
        )
    ]
)

if __name__ == '__main__':
    app.run_server(debug=True)

--------------------------------------------------------------------------------------------------------------------
import dash
import dash_vtk
import pyvista as pv

# Path to the STP file
stp_file_path = 'path/to/your/file.stp'

# Load the STP file
mesh = pv.read(stp_file_path)

# Create the Dash app
app = dash.Dash(__name__)

# Define the layout of the app
app.layout = dash_vtk.View([
    dash_vtk.GeometryRepresentation(
        id="vtk-rep",
        color="lightpink",
        children=[
            dash_vtk.Mesh(
                id="vtk-mesh",
                points=mesh.points.tolist(),
                polys=mesh.faces.tolist(),
            )
        ],
    ),
])

if __name__ == '__main__':
    app.run_server(debug=True)

--------------------------------------------------------------------------------------------------------------------
import dash
import dash_vtk
import pyvista as pv

# Path to the STP file
stp_file_path = 'path/to/your/file.stp'

# Load the STP file
mesh = pv.read(stp_file_path)

# Create the Dash app
app = dash.Dash(__name__)

# Define the layout of the app
app.layout = dash_vtk.View(
    id="vtk-view",
    children=[
        dash_vtk.GeometryRepresentation(
            id="vtk-rep",
            color="lightpink",
            mesh=mesh,
        ),
    ],
)

if __name__ == '__main__':
    app.run_server(debug=True)

--------------------------------------------------------------------------------------------------------------------
import numpy as np
import open3d as o3d
import plotly.graph_objects as go

# Path to the STP file
stp_file_path = 'path/to/your/file.stp'

# Read the STP file
mesh = o3d.io.read_triangle_mesh(stp_file_path)

# Extract vertices and triangles from the mesh
vertices = np.array(mesh.vertices)
triangles = np.array(mesh.triangles)

# Create the plotly trace for the 3D mesh
trace = go.Mesh3d(
    x=vertices[:, 0],
    y=vertices[:, 1],
    z=vertices[:, 2],
    i=triangles[:, 0],
    j=triangles[:, 1],
    k=triangles[:, 2],
    color='lightpink',
    showscale=False
)

# Create the layout and add the trace to the scene
layout = go.Layout(
    scene=dict(
        aspectmode='data'
    )
)
fig = go.Figure(data=[trace], layout=layout)

# Show the figure
fig.show()

--------------------------------------------------------------------------------------------------------------------

import numpy as np
import trimesh
import plotly.graph_objects as go

# Path to the STP file
stp_file_path = 'path/to/your/file.stp'

# Read the STP file
mesh = trimesh.load(stp_file_path)

# Extract vertices and faces from the mesh
vertices = mesh.vertices
faces = mesh.faces

# Create the plotly trace for the 3D mesh
trace = go.Mesh3d(
    x=vertices[:, 0],
    y=vertices[:, 1],
    z=vertices[:, 2],
    i=faces[:, 0],
    j=faces[:, 1],
    k=faces[:, 2],
    color='lightpink',
    showscale=False
)

# Create the layout and add the trace to the scene
layout = go.Layout(
    scene=dict(
        aspectmode='data'
    )
)
fig = go.Figure(data=[trace], layout=layout)

# Show the figure
fig.show()

--------------------------------------------------------------------------------------------------------------------
import plotly.graph_objects as go
import pywavefront as pw

# Read the OBJ file
obj = pw.WavefrontOBJ("my_model.obj")

# Get the vertex and triangle data
vertices = obj.vertices
triangles = obj.faces

# Create a Plotly mesh3d trace
trace = go.Mesh3d(
    x=vertices[:, 0],
    y=vertices[:, 1],
    z=vertices[:, 2],
    i=triangles[:, 0],
    j=triangles[:, 1],
    k=triangles[:, 2],
    color="lightblue",
)

# Create a figure and add the trace
fig = go.Figure(data=[trace])

# Show the figure
fig.show()
--------------------------------------------------------------------------------------------------------------------
import numpy as np

def get_coordinates_relative_to_another_coordinate_system(point_coordinates, origin_coordinates, rotation_matrix):
  """Gets the coordinates of a point relative to another coordinate system.

  Args:
    point_coordinates: A list or tuple of the x-, y-, and z-coordinates of the point.
    origin_coordinates: A list or tuple of the x-, y-, and z-coordinates of the origin of the other coordinate system.
    rotation_matrix: A 3x3 rotation matrix.

  Returns:
    A list or tuple of the x-, y-, and z-coordinates of the point in the other coordinate system.
  """

  rotated_coordinates = np.dot(rotation_matrix, np.array(point_coordinates).reshape(3, 1))
  relative_coordinates = rotated_coordinates - np.array(origin_coordinates).reshape(3, 1)

  return relative_coordinates.reshape(-1).tolist()


if __name__ == "__main__":
  point_coordinates = [10, 20, 30]
  origin_coordinates = [0, 0, 0]
  rotation_matrix = np.array([[1, 0, 0], [0, -1, 0], [0, 0, -1]])

  relative_coordinates = get_coordinates_relative_to_another_coordinate_system(point_coordinates, origin_coordinates, rotation_matrix)

  print("The coordinates of the point relative to the other coordinate system are: {}".format(relative_coordinates))















-----------------------------------------------------------------------------------------------------------------------


import numpy as np

def cross_product(v1, v2):
  """Calculates the cross product of two vectors.

  Args:
    v1: A list or tuple of the x-, y-, and z-coordinates of the first vector.
    v2: A list or tuple of the x-, y-, and z-coordinates of the second vector.

  Returns:
    A list or tuple of the x-, y-, and z-coordinates of the cross product vector.
  """

  x = v1[1] * v2[2] - v1[2] * v2[1]
  y = v1[2] * v2[0] - v1[0] * v2[2]
  z = v1[0] * v2[1] - v1[1] * v2[0]

  return [x, y, z]


if __name__ == "__main__":
  v1 = [1, 2, 3]
  v2 = [4, 5, 6]

  cross_product_vector = cross_product(v1, v2)

  print("The cross product vector is: {}".format(cross_product_vector))


-----------------------------------------------------------------------------------------------------------------------


import sys

def save_data_from_bottom_till_earliest_occurrence_of_string(filename, string):
  """Saves data from the bottom of a file till the earliest occurrence of a specific string.

  Args:
    filename: The name of the file to read.
    string: The string to search for.

  Returns:
    A list of the lines from the file from the bottom till the earliest occurrence of the string.
  """

  with open(filename, "r") as f:
    f.seek(0, 2)  # Seek to the end of the file.
    file_size = f.tell()
    lines = []
    while file_size > 0:
      offset = file_size - len(string)
      f.seek(offset, 0)
      line = f.readline()
      if string in line:
        lines.reverse()
        return lines
      file_size -= len(line)

  return []


if __name__ == "__main__":
  filename = sys.argv[1]
  string = sys.argv[2]

  lines = save_data_from_bottom_till_earliest_occurrence_of_string(filename, string)

  print("The lines from the file from the bottom till the earliest occurrence of the string are:")
  for line in lines:
    print(line)



-----------------------------------------------------------------------------------------------------------------------


import sys
import re

def save_data_from_bottom_till_earliest_occurrence_of_string_pattern(filename, string_pattern):
  """Saves data from the bottom of a file till the earliest occurrence of a specific string pattern.

  Args:
    filename: The name of the file to read.
    string_pattern: The string pattern to search for.

  Returns:
    A list of the lines from the file from the bottom till the earliest occurrence of the string pattern.
  """

  with open(filename, "r") as f:
    f.seek(0, 2)  # Seek to the end of the file.
    file_size = f.tell()
    lines = []
    while file_size > 0:
      offset = file_size - len(string_pattern)
      f.seek(offset, 0)
      line = f.readline()
      match = re.search(string_pattern, line)
      if match:
        lines.reverse()
        return lines
      file_size -= len(line)

  return []


if __name__ == "__main__":
  filename = sys.argv[1]
  string_pattern = sys.argv[2]

  lines = save_data_from_bottom_till_earliest_occurrence_of_string_pattern(filename, string_pattern)

  print("The lines from the file from the bottom till the earliest occurrence of the string pattern are:")
  for line in lines:
    print(line)


-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------

